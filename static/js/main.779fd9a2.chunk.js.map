{"version":3,"sources":["img/say.jpg","todo/TodoItem.js","todo/TodoList.js","todo/InputTodo.js","todo/Template.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextLine","styled","span","NormalLine","Container","div","TodoItem","props","flag","removeItem","text","id","remove","handleCheck","className","type","checked","onChange","htmlFor","Provider","value","color","size","e","onClick","stopPropagation","imgURL","TodoList","todoTexts","printTodoList","map","ary","index","key","style","position","left","right","top","bottom","background","InputBox","input","SubmitBtn","button","InputTodo","useState","todoText","setTodoText","setTodoTexts","setId","useEffect","temp","JSON","parse","localStorage","getItem","todo_id","console","log","handleSubmit","setItem","stringify","maxlength","placeholder","autoFocus","target","onKeyPress","todo","setTimeout","filter","GlobalStyles","createGlobalStyle","reset","DateTitle","Title","Template","today","setToday","getToday","Date","year","getFullYear","month","getMonth","date","getDate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.779fd9a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/say.d35b8ca5.jpg\";","import React,{useState} from 'react';\nimport '../style/style.css';\nimport '../style/animate.css'\nimport styled from 'styled-components';\nimport {IoMdClose} from 'react-icons/io';\nimport { IconContext } from \"react-icons\";\n\nconst TextLine = styled.span`\n    text-decoration:line-through;\n    margin-left: 5px;\n`;\n\nconst NormalLine = styled.span`\n    margin-left: 5px;\n    color: #d00ddd;\n`;\nconst Container = styled.div`\n    display:flex;\n    align-items:center;\n    margin: 10px;\n`;\n\nconst TodoItem = (props) => {\n    const {flag, removeItem, text, id,remove,handleCheck} = props;\n\n    return(\n        <div>\n            {\n                !remove ?(\n                    <div>\n                        <Container>\n                            <input type=\"checkbox\" id={id} checked={flag} onChange={(e)=>{handleCheck(id)}}/>\n                                <label htmlFor={id}>\n                                    <div className=\"tick\"></div>\n                                </label>\n                            {\n                                flag ? (\n                                    <TextLine>{text}</TextLine>\n                                ):(<NormalLine>{text}</NormalLine>)\n                            }\n                            <IconContext.Provider value={{ color:\"#555\", size:\"1.5em\", className: \"global-class-name\" }}>\n                                <IoMdClose onClick={(e) => {\n                                    e.stopPropagation(); // onToggle 이 실행되지 않도록 함\n                                    removeItem(id);\n                                }}/>\n                            </IconContext.Provider>\n\n                        </Container>\n                    </div>\n                ):(\n                    <div className=\"animate__animated animate__fadeOutLeft\">\n                        <Container>\n                            <input type=\"checkbox\" id={id} checked={flag} onChange={handleCheck}/>\n                                <label htmlFor={id}>\n                                    <div className=\"tick\"></div>\n                                </label>\n                            {\n                                flag ? (\n                                    <TextLine>{text}</TextLine>\n                                ):(<span>{text}</span>)\n                            }\n                            <IconContext.Provider value={{ color:\"#555\", size:\"1.5em\", className: \"global-class-name\" }}>\n                                <IoMdClose/>\n                            </IconContext.Provider>\n\n                        </Container>\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default TodoItem;\n","import React,{useState,useEffect} from 'react';\nimport TodoItem from './TodoItem';\nimport styled from 'styled-components';\nimport imgURL from '../img/say.jpg';\n\nconst Container  = styled.div`\n    with: 100%;\n    height: 80%;\n    margin-top: 1%;\n    // background-color: rgb(255,255,255);\n    background: url(${imgURL}) center;\n    background-size: cover;\n    // opacity:0.5;//透明度设置\n    overflow:auto;\n    position: relative;\n`;\n\nconst TodoList = props => {\n    const {todoTexts, removeItem,handleCheck} = props;\n\n    const printTodoList = todoTexts.map((ary,index)=>(<TodoItem key={index} id={ary.id} text={ary.text} flag={ary.flag} removeItem={removeItem} remove={ary.remove} handleCheck={handleCheck}/>))\n\n\n    return(\n        <Container>\n            <div\n                style={{\n                    position: 'absolute',\n                    left: 0,\n                    right: 0,\n                    top: 0,\n                    bottom: 0,\n                    background:`rgba(255,255,255,0.6)`\n                }}>\n                {printTodoList}\n            </div>\n        </Container>\n    );\n}\n\nexport default TodoList;\n","import React,{useState,useEffect} from 'react';\nimport TodoList from './TodoList';\nimport styled from 'styled-components';\nimport reset from 'styled-reset';\n\nconst Container = styled.div`\n    margin: 0;\n    height: 100%;\n    width: 100%;\n    text-align:left;\n    @media(min-width:768px)\n    {\n        text-align:center;\n    }\n`;\n\nconst InputBox = styled.input`\n    border: none;\n    height: 40px;\n    width : 85%;\n    line-height: 40px;\n    outline:none;\n    padding-left: 3px;\n    padding-rignt: 3px;\n    margin: 0;\n\n    @media(min-width:768px)\n    {\n        width : 90%;\n    }\n`;\n\nconst SubmitBtn = styled.button`\n    border: none;\n    background-color: rgba(0,0,0,0);\n    color: #78B6FF;\n    font-weight: 800;\n    width: 10%;\n    margin-left: 2%;\n    &:hover {\n    color: #1981FF;\n    }\n    &:focus {\n        outline: none;\n    }\n    @media(min-width:768px)\n    {\n        width: 9%;\n        margin-left: 1%;\n    }\n`;\n\nconst InputTodo = () => {\n    const [todoText,setTodoText] = useState('');\n    const [todoTexts,setTodoTexts] = useState([]);\n    const [id,setId] = useState(0);\n\n    useEffect(()=>{\n        var temp = JSON.parse(localStorage.getItem('TODO_VALUES'));\n        var todo_id = localStorage.getItem('TODO_ID');\n        console.log(todo_id);\n\n        if(temp !== null)\n        {\n            setTodoTexts(temp);\n            setId(todo_id);\n        }\n    },[]);\n\n    const handleSubmit = () => {\n        if(todoText != \"\")\n        {\n            setTodoTexts(todoTexts=>[...todoTexts,{id:id ,text: todoText,flag: false,remove: false}]);\n            setTodoText('');\n            var temp = id;\n            setId(++temp);\n\n            var ary = [...todoTexts,{id:id ,text: todoText,flag: false,remove: false}];\n\n            localStorage.removeItem('TODO_VALUES');\n            localStorage.setItem('TODO_VALUES', JSON.stringify(ary));\n\n            localStorage.removeItem('TODO_ID');\n            localStorage.setItem('TODO_ID',++temp);\n        }\n    }\n\n    const removeItem = (id) => {\n        setTodoTexts(todoTexts.map(todo => todo.id == id ? ({...todo, remove: true}):todo));\n        setTimeout(() => {\n            setTodoTexts(todoTexts.filter(todo => todo.id !== id));\n            var temp = todoTexts.filter(todo => todo.id !== id);\n\n            localStorage.removeItem('TODO_VALUES');\n            localStorage.setItem('TODO_VALUES',JSON.stringify(temp));\n        }, 500);\n    }\n\n    const handleCheck = (id) => {\n        setTodoTexts(todoTexts.map(todo => todo.id == id ? ({...todo, flag: !todo.flag}):todo));\n\n        var temp = todoTexts.map(todo => todo.id == id ? ({...todo, flag: !todo.flag}):todo);\n        localStorage.removeItem('TODO_VALUES');\n        localStorage.setItem('TODO_VALUES',JSON.stringify(temp));\n    }\n\n    const changeTodo = (e) => {\n        setTodoText(e.target.value);\n    }\n\n    const onKeyPress = (e) => {\n        if(e.key == 'Enter')\n        {\n            handleSubmit();\n        }\n    }\n\n    return(\n        <Container>\n            <InputBox maxlength=\"10\" placeholder=\"请输入\" autoFocus onChange={changeTodo} value={todoText} onKeyPress={onKeyPress}/>\n            <SubmitBtn onClick={handleSubmit}>添加</SubmitBtn>\n            <TodoList todoTexts={todoTexts} removeItem={removeItem} handleCheck={handleCheck}/>\n        </Container>\n    );\n}\n\n\nexport default InputTodo;\n","import React,{useState, useEffect} from 'react';\nimport InputTodo from './InputTodo';\nimport styled, { createGlobalStyle }  from 'styled-components';\nimport reset from 'styled-reset';\n\nconst Container = styled.div`\n    position: absolute;\n    top: 50%; left: 50%;\n    width: 90%; height: 450px;\n    margin: -225px 0px 0px -45%;\n    padding: 2%;\n    background-color: rgba(255, 255, 255, 0.8);\n    \n    color:#555;\n    @media(min-width:768px)\n    {\n        width: 40%; height: 450px;\n        margin: -225px 0px 0px -20%;\n    }\n`;\n\nconst GlobalStyles = createGlobalStyle`\n    ${reset};\n    a{\n        text-decoration: none;\n        color:inherit;\n    }\n    *{\n        box-sizing:border-box;\n    }\n    @font-face{\n        font-family:\"NanumGothic\";\n        font-weight: normal;\n        src: url(\"../font/NanumGothic.woff\") format(\"woff\");\n    }\n    body {\n        font-family: \"NanumGothic\";\n        // background: linear-gradient( to bottom, #FF4A4F, #FF5C7D );\n    }\n`;\n\nconst DateTitle = styled.div`\n    font-size: 1rem;\n    margin-bottom: 10px;\n    text-align:center;\n`;\n\nconst Title = styled.div`\n    font-size: 1.5rem; \n    margin-bottom: 10px;\n    font-weight: 600;\n    text-align:center;\n    margin-top:10px;\n    @media(min-width:768px)\n    {\n        margin-top:0px;\n    }\n`;\n\nconst Template = () => {\n    const [today,setToday] = useState('');\n\n    useEffect(()=>{\n        setToday(getToday());\n    });\n\n    const getToday = () => {\n        let today = new Date();\n        let year = today.getFullYear(); // 년도\n        let month = today.getMonth() + 1;  // 월\n        let date = today.getDate();  // 날짜\n\n        if(month <10)\n        {\n            month = \"0\"+month;\n        }\n        if(date <10)\n        {\n            date = \"0\"+date;\n        }\n        return year+\".\"+month+\".\"+date;\n    }\n\n    return(\n\n        <>\n            <GlobalStyles/>\n            <Container>\n                <Title>黄小胖 To-Do List</Title>\n                <DateTitle>{today}</DateTitle>\n                <InputTodo/>\n            </Container>\n        </>\n    );\n}\n\nexport default Template;\n","import React from 'react';\nimport Template from './todo/Template';\n\nfunction App() {\n  return (\n    <Template/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}